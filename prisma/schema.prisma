// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js 必須モデル
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ユーザー（学生）モデル
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  
  // 学生情報
  studentId     String?   @unique
  department    String?
  faculty       String?
  year          Int?
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  grades        Grade[]
  registrations CourseRegistration[]
  timetable     TimetableItem[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

// 成績モデル
model Grade {
  id           String @id @default(cuid())
  userId       String
  subjectName  String
  subjectCode  String
  professor    String
  credits      Int
  semester     String
  year         Int
  grade        String
  gpa          Float
  category     String
  department   String
  finalScore   Int
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("grades")
}

// 履修登録モデル
model CourseRegistration {
  id           String @id @default(cuid())
  userId       String
  courseId     String
  courseName   String
  courseCode   String
  credits      Int
  semester     String
  academicYear Int
  status       String
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  registrationDate DateTime @default(now())
  lastModified     DateTime @updatedAt

  @@map("course_registrations")
}

// 時間割モデル
model TimetableItem {
  id        String @id @default(cuid())
  userId    String
  subject   String
  professor String
  room      String
  startTime String
  endTime   String
  dayOfWeek Int
  period    Int
  color     String @default("#3B82F6")
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("timetable_items")
}